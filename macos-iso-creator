#!/bin/bash
set -eu
## Variables Filled by CLI
SOURCE=""
ACTION=""
## Variables filled during operations
OS_NAME=""
OS_VERSION=""
OS_MAJOR_VERSION=""
CREATEINSTALLMEDIA_LOC=""
BASESYSTEM_LOC=""
INSTALLESD_LOC=""
ATTACHED_MOUNTS=()
WORK_DIR=""
## Command variables
ASR="$(command -v asr)"
DEFAULTS="$(command -v defaults)"
FIND="$(command -v find)"
HDIUTIL="$(command -v hdiutil)"
#### Functions ####
function print()
{
    local OPTIND
    Black='\033[0;30m'        # Black
    Red='\033[0;31m'          # Red
    Green='\033[0;32m'        # Green
    Yellow='\033[0;33m'       # Yellow
    Blue='\033[0;34m'         # Blue
    Purple='\033[0;35m'       # Purple
    Cyan='\033[0;36m'         # Cyan
    White='\033[0;37m'        # White
    NC='\033[m'               # Color Reset
    FGND=""
    NL=1    # Force newline
    PNL=0
    STRING=" "
    while getopts "f:npKRGYBPCWS:" opt
    do
        case "$opt" in
            "f")    # Set foreground/text color.
                case "$OPTARG" in
                    "black") FGND="$Black";;
                    "red") FGND="$Red";;
                    "green") FGND="$Green";;
                    "yellow") FGND="$Yellow";;
                    "blue") FGND="$Blue";;
                    "purple") FGND="$Purple";;
                    "cyan") FGND="$Cyan";;
                    "white") FGND="$White";;
                    *) echo "Unrecognized Arguement: $OPTARG" >&2 ;;
                esac
                ;;
            "n") NL=0 ;;            # Print without newline.
            "p") ((PNL++)) ;;       # Prepend with newline.
            "K") FGND="$Black";;
            "R") FGND="$Red";;
            "G") FGND="$Green";;
            "Y") FGND="$Yellow";;
            "B") FGND="$Blue";;
            "P") FGND="$Purple";;
            "C") FGND="$Cyan";;
            "W") FGND="$White";;
            "S") STRING="$OPTARG" ;;
            *) echo "Unknown Arguement: $opt" >&2 ;;
        esac
    done
    if [[ "${STRING}" == " " ]];then
        shift "$((OPTIND - 1))"
        STRING="$*"
    fi
    [ -n "${FGND}" ] && STRING="${FGND}${STRING}${NC}"
    while [ ${PNL} -ne 0 ]
    do
        STRING="\n${STRING}"
        ((PNL--))
    done
    [ $NL -eq 1 ] && STRING="${STRING}\n"
    echo -n -e "${STRING}" >&2 # Send all output to stderr
}

function find_file()
{
    trap 'find_file: parameter errors: ($#) $* && exit 1' ERR
    [ $# -eq 2 ]
    test -n "${1}"
    [ -d "${1}" ]
    test -n "${2}"
    trap - ERR

    count=$("${FIND}" "${1}" -type f -name "${2}" -xdev | wc -l)
    if [ ${count} -gt 1 ]; then
        print -R "Found > 1 results for ${2} in ${1}"
        echo ""
        return 1
    fi
    if [ ${count} -eq 0 ]; then
        print -R "No results found for $2 in $1"
        echo ""
        return 1
    fi
    "${FIND}" "${1}" -type f -name "${2}" -xdev
}

function parse_os_version()
{
    OS_MAJOR_VERSION="$(echo ${1} | cut -d . -f1)"
    OS_MINOR_VERSION="$(echo ${1} | cut -d . -f2)"
    if [ "${OS_MAJOR_VERSION}" -eq 10 ]; then
        case "${OS_MINOR_VERSION}" in
            "15") OS_NAME="Catalina" ;;
            "14") OS_NAME="Mojave" ;;
            "13") OS_NAME="High_Sierra" ;;
            "12") OS_NAME="Sierra" ;;
            "11") OS_NAME="El_Capitan";;
            "10") OS_NAME="Yosemite" ;;
            "9") OS_NAME="Mavericks" ;;
            *)
                print -Y "Unrecognized OS_MINOR_VERSION: ${OS_MINOR_VERSION}"
                OS_NAME="Unknown"
                return 1
                ;;
        esac
    elif [ "${OS_MAJOR_VERSION}" -eq 11 ]; then
        OS_NAME="Big_Sur"
    elif [ "${OS_MAJOR_VERSION}" -eq 12 ]; then
        OS_NAME="Monterey"
    elif [ "${OS_MAJOR_VERSION}" -eq 13 ]; then
        OS_NAME="Ventura"
    else
        print -Y "Unrecognized OS_MAJOR_VERSION: ${OS_MAJOR_VERSION}"
        OS_NAME="Unknown"
        return 1
    fi
}

function process_source()
{
    mkdir -pv "${WORK_DIR}/base_system"
    mkdir -pv "${WORK_DIR}/install_esd"
    INSTALLESD_LOC=$(find_file "${SOURCE}" "InstallESD.dmg")
    if ! find_file "${SOURCE}" "BaseSystem.dmg"; then
        print -Y "BaseSystem.dmg not found, searching inside InstallESD.dmg"
        attach "${INSTALLESD_LOC}" "${WORK_DIR}/install_esd"
        BASESYSTEM_LOC=$(find_file "${WORK_DIR}/install_esd"  "BaseSystem.dmg")
    else
        BASESYSTEM_LOC=$(find_file "${SOURCE}" "BaseSystem.dmg")
    fi
    attach "${BASESYSTEM_LOC}" "${WORK_DIR}/base_system"
    OS_VERSION=$(${DEFAULTS} read "${WORK_DIR}/base_system/System/Library/CoreServices/SystemVersion.plist" "ProductVersion")
    parse_os_version "${OS_VERSION}"
    print -B "INSTALLESD_LOC: ${INSTALLESD_LOC}"
    print -B "BASESYSTEM_LOC: ${BASESYSTEM_LOC}"
    print -B "OS_NAME: ${OS_NAME}"
    print -B "OS_VERSION: ${OS_VERSION}"

    detach_mounts
}

function attach()
{
    trap 'attach: parameter errors: ($#) $* && exit 1' ERR
    [ $# -eq 2 ]
    [ -f "${1}" ]
    [ -d "${2}" ]
    trap - ERR
    if ! ${HDIUTIL} attach "${1}" -noverify -nobrowse -mountpoint "${2}"; then
        print -R "Issue with attaching ${1} to ${2}"
        return 1
    else
        ATTACHED_MOUNTS=( "${ATTACHED_MOUNTS[@]}" "${2}" )
    fi
}
function detach_mounts()
{
    [ ${#ATTACHED_MOUNTS[@]} -gt 0 ] && print -B "Attached Mounts (${#ATTACHED_MOUNTS[@]}): ${ATTACHED_MOUNTS[*]}"
    still_attached=()
    for M in "${ATTACHED_MOUNTS[@]}"
    do
        print -Y "Attempting detach: ${M}"
        if ! "${HDIUTIL}" detach "${M}"; then
            still_attached=( "${still_attached[@]}" "${M}" )
        fi
    done
    ATTACHED_MOUNTS=( "${still_attached[@]}" )
}
function create()
{
    print -G "Starting Creation process for ${SOURCE}"
    mkdir -p "${WORK_DIR}/install_build"
    mkdir -p "${WORK_DIR}/install_app"
    pushd "${WORK_DIR}" || exit 1
    TARGET_NAME="${OS_NAME}""_""${OS_VERSION}"
    "${HDIUTIL}" create -o "${WORK_DIR}/${TARGET_NAME}.cdr" -size 12g -layout SPUD -fs HFS+J
    attach "${WORK_DIR}/$TARGET_NAME.cdr.dmg" "${WORK_DIR}/install_build"

    case "${OS_MAJOR_VERSION}.${OS_MINOR_VERSION}" in
        "12."* | "11."* | "10.15" | "10.14" | "10.13")
            CREATEINSTALLMEDIA_LOC=$(find_file "${SOURCE}" "createinstallmedia")
            "${CREATEINSTALLMEDIA_LOC}" --volume "${WORK_DIR}/install_build" --nointeraction
            ;;
        "10.12" | "10.11" | "10.10" | "10.9")
            attach "${INSTALLESD_LOC}" "${WORK_DIR}/install_app"
            "${ASR}" restore -source "${WORK_DIR}/install_app/BaseSystem.dmg" -target "${WORK_DIR}/install_build" -noprompt -noverify -erase
            loop_count=1
            BASE_SYSTEM_ROOT="/Volumes/OS X Base System"
            while [ ! -d "${BASE_SYSTEM_ROOT}" ]
            do
                sleep_count=3
                (( sleep_count = loop_count * sleep_count ))
                print -Y "Waiting for OS X Base System to mount, sleeping for $sleep_count seconds..."
                sleep $sleep_count
                ((loop_count++))
                [ ${loop_count} -gt 3 ] && print -R "Timeout while waiting for OS X Base System to mount." && exit 1
            done
            ATTACHED_MOUNTS=( "${ATTACHED_MOUNTS[@]}" "${WORK_DIR}/install_build" "${BASE_SYSTEM_ROOT}" )
            rm -f "${BASE_SYSTEM_ROOT}/System/Installation/Packages"
            rsync -vrPa "${WORK_DIR}/install_app/Packages" "${BASE_SYSTEM_ROOT}/System/Installation/"
            rsync -vPa  "${WORK_DIR}/install_app/BaseSystem.chunklist" "${BASE_SYSTEM_ROOT}/BaseSystem.chunklist"
            rsync -vPa  "${WORK_DIR}/install_app/BaseSystem.dmg" "${BASE_SYSTEM_ROOT}/BaseSystem.dmg"
            ;;
        *)
            print -R "Unsupported OS_VERSION: $OS_VERSION"
            exit 1
            ;;
    esac

    if ! ${HDIUTIL} convert "${WORK_DIR}/${TARGET_NAME}.cdr.dmg" -format UDTO -o "${WORK_DIR}/${TARGET_NAME}.iso"; then
        print -R "Conversion failed. See above for errors."
        exit 1
    fi
    mv -f "${WORK_DIR}/${TARGET_NAME}.iso.cdr" "${WORK_DIR}/${TARGET_NAME}.iso"
    rm -f "${WORK_DIR}/${TARGET_NAME}.cdr.dmg"
    print -G "Your ISO is ready for deployment at ${WORK_DIR}/${TARGET_NAME}.iso"
    /usr/bin/open "${WORK_DIR}"
}
function usage()
{
    cat << USAGE_EOF >&2
macOS ISO Creator - ${0}
    Rudimentry CLI for creating ISO for macOS.
    Only works on macOS systems.
    sudo required.
Usage
Optional Flags:
    [-h|--help]
        Display this dialog

Required Flags:
    [-s|--source] PATH
        Specifiy the absolute path to source.
    [inspect|create]
        Choose an action.
USAGE_EOF
}

#### Main Run ####
trap usage ERR
[ "$(uname -s)" == "Darwin" ]
[ $# -gt 0 ]
[ $(id -u) -eq 0 ]
trap - ERR

while [[ $# -gt 0 ]];
do
    case ${1} in
        "-h" | "--help") usage && exit 0 ;;
        "-s" | "--source") SOURCE="${2}" && shift ;;
        "create" | "inspect" ) ACTION="${1}" ;;
        *)
            print -R "Unrecognized Argument: ${1}"
            usage
            exit 1
            ;;
    esac
    shift
done

trap usage ERR
test -n "${HDIUTIL}"
test -n "${FIND}"
test -n "${ASR}"
test -n "${DEFAULTS}"
test -n "${SOURCE}"
test -n "${ACTION}"
[ -d "${SOURCE}" ]
trap - ERR

WORK_DIR="$(mktemp -d)"

trap detach_mounts ERR
case "${ACTION}" in
    "inspect")
        process_source
        detach_mounts
        ;;
    "create")
        process_source
        create
        detach_mounts
        ;;
    *)
        print -R "Unknown action: ${ACTION}"
        usage
        exit 1
        ;;
    esac
trap - ERR
