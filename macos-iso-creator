#!/bin/bash
trap detach_all_volumes 0 1 2 3 6 9 14 15
#### Global Variables ####
DEBUG=0
VERBOSE=""
CREATE=0
OS_NAME=""
OS_VERSION=""
SOURCE=""
CREATEINSTALLMEDIA_LOC=""
WORK_DIR="/tmp/$0-$(date +%s)"
vols=("$WORK_DIR/install_build" "$WORK_DIR/install_app" "/Volumes/OS X Base System/")
#### Functions ####
print()
{
	local OPTIND
	if [ "$(uname -s)" == "Darwin" ];then
		Black='\033[0;30m'        # Black
		Red='\033[0;31m'          # Red
		Green='\033[0;32m'        # Green
		Yellow='\033[0;33m'       # Yellow
		Blue='\033[0;34m'         # Blue
		Purple='\033[0;35m'       # Purple
		Cyan='\033[0;36m'         # Cyan
		White='\033[0;37m'        # White
		NC='\033[m'               # Color Reset
	else
		Black='\e[0;30m'        # Black
		Red='\e[0;31m'          # Red
		Green='\e[0;32m'        # Green
		Yellow='\e[0;33m'       # Yellow
		Blue='\e[0;34m'         # Blue
		Purple='\e[0;35m'       # Purple
		Cyan='\e[0;36m'         # Cyan
		White='\e[0;37m'        # White
		NC="\e[m"               # Color Reset
	fi
	colors=( "$Red" "$Green" "$Gellow" "$Blue" "$Purple" "$Cyan" )
	local DEBUG=0
	FGND=""
	NL=1
	PNL=0
	STRING=" "
	while getopts "f:npKRGYBPCWS:" opt
	do
		case "$opt" in
			"f")					# Set foreground/text color.
				case "$OPTARG" in
					"black") FGND="$Black";;
					"red") FGND="$Red";;
					"green") FGND="$Green";;
					"yellow") FGND="$Yellow";;
					"blue") FGND="$Blue";;
					"purple") FGND="$Purple";;
					"cyan") FGND="$Cyan";;
					"white") FGND="$White";;
					"*") [ $DEBUG -eq 1 ] && echo "Unrecognized Arguement: $OPTARG" ;;
				esac
				;;
			"n") NL=0 ;;	 			# Print with newline.
			"p") ((PNL++)) ;; 			# Prepend with newline.
			"K") FGND="$Black";;
			"R") FGND="$Red";;
			"G") FGND="$Green";;
			"Y") FGND="$Yellow";;
			"B") FGND="$Blue";;
			"P") FGND="$Purple";;
			"C") FGND="$Cyan";;
			"W") FGND="$White";;
			"D") local DEBUG=1 ;;
			"S") STRING="$OPTARG" ;;
			"*") [ $DEBUG -eq 1 ] && echo "Unknown Arguement: $opt" ;;
		esac
	done
	if [[ "$STRING" == " " ]];then
		shift "$((OPTIND - 1))"
		STRING="$@"
	fi
	if [ $DEBUG -eq 1 ]; then
		echo "FGND: $FGND"
		echo "NL: $NL"
		echo "PNL: $PNL"
		echo "STRING: $STRING"
	fi
	while [ $PNL -ne 0 ]
	do
		printf "\n"
		((PNL--))
	done
	[ ! -z $FGND ] && STRING="$FGND$STRING$NC"
	printf -- "$STRING"
	[ $NL -eq 1 ] && printf "\n"
}
check_source()
{
	[ $DEBUG -eq 1 ] && print -B "Checking source: $SOURCE"
	[ ! -d "$SOURCE" ] && print -R "Could not find source at $SOURCE" && exit 1
	[ $DEBUG -eq 1 ] && print -B "Found source at $SOURCE"
	if [[ "${SOURCE: -1}" == "/" ]];then
		REVERSED="$(echo $SOURCE | rev)"
		SOURCE="$(echo ${REVERSED: -$(expr $(echo $REVERSED | wc -c) - 2)} | rev)"
	fi
	FILE="$(echo "$SOURCE" | rev | cut -d"/" -f1 | rev)"
	[[ ! "$FILE" == *".app" ]] && print -R "Not a valid .app source file: $FILE" && exit 1
	[ $DEBUG -eq 1 ] && print -B "Found a valid .app source file: $FILE"
}

process_source()
{
	if [ ! -d "$WORK_DIR" ];then
		mkdir -p$VERBOSE "$WORK_DIR"
	fi
	mkdir -p$VERBOSE "$WORK_DIR/base_system"
	mkdir -p$VERBOSE "$WORK_DIR/install_esd"
	cd "$WORK_DIR"
	OIFS="$IFS"
	IFS=$'\n'
	INSTALLESD_LOC="$(/usr/bin/find $SOURCE -type f -name InstallESD.dmg -xdev)"
	BASESYSTEM_LOC="$(/usr/bin/find $SOURCE -type f -name BaseSystem.dmg -xdev)"
	CREATEINSTALLMEDIA_LOC="$(/usr/bin/find $SOURCE -type f -name createinstallmedia -xdev)"
	[ ! -f "$CREATEINSTALLMEDIA_LOC" ] && print -R "Missing createinstallmedia binary" && exit 1
	[ ! -f "$INSTALLESD_LOC" ] && print -R "Missing InstallESD.dmg" && exit 1
	if [ ! -f "$BASESYSTEM_LOC" ];then
		[ $DEBUG -eq 1 ] && print -B "BaseSystem.dmg not found, searching inside InstallESD.dmg"
		attach "$INSTALLESD_LOC" "$WORK_DIR/install_esd"
		BASESYSTEM_LOC="$(/usr/bin/find $WORK_DIR/install_esd -type f -name BaseSystem.dmg -xdev)"
		[ ! -f "$BASESYSTEM_LOC" ] && print -R "Missing BaseSystem.dmg" && exit 1
	fi
	attach "$BASESYSTEM_LOC" "$WORK_DIR/base_system"
	IFS="$OIFS"
	OS_VERSION="$(/usr/bin/defaults read $WORK_DIR/base_system/System/Library/CoreServices/SystemVersion.plist ProductVersion)"
	case "$(echo $OS_VERSION | cut -d . -f2)" in
		"13") OS_NAME="High_Sierra";;
		"12") OS_NAME="Sierra";;
		"11") OS_NAME="El_Capitan";;
		"10") OS_NAME="Yosemite";;
		"9") OS_NAME="Mavericks";;
		*)
			print -Y "Unrecognized OS_VERSION: $OS_VERSION"
			OS_NAME="Unknown"
			;;
	esac
	if [ $DEBUG -eq 1 ]; then
		print -B "INSTALLESD_LOC: $INSTALLESD_LOC"
		print -B "BASESYSTEM_LOC: $BASESYSTEM_LOC"
		print -B "CREATEINSTALLMEDIA_LOC: $CREATEINSTALLMEDIA_LOC"
		print -B "OS_NAME: $OS_NAME"
		print -B "OS_VERSION: $OS_VERSION"
	fi

	/usr/bin/hdiutil detach "$WORK_DIR/base_system"
	/usr/bin/hdiutil detach "$WORK_DIR/install_esd"
}

attach()
{
	[ $# -lt 2 ] && print -R "Missing Variables in attach function." && exit 1
	[ ! -f $1 ] && print -R "Missing $1" && exit 1
	[ ! -d $2 ] && print -R "Missing mountpoint directory: $2" && exit 1
	/usr/bin/hdiutil attach "$1" -noverify -nobrowse -mountpoint "$2"
	OIFS="$IFS"
	IFS=$'\n'
	vols=( ${vols[@]} "$2" )
	IFS="$OIFS"
	[ $? -ne 0 ] && print -R "Issue with attaching $1 to $2" && exit 1
}
detach_all_volumes()
{
	OIFS="$IFS"
	IFS=$'\n'
	vols=( ${vols[@]} $(/usr/bin/find /Volumes/ -type d -iname *"Install"* -d 1 -xdev) )
	IFS="$OIFS"
	for v in "${vols[@]}"
	do
		[ $DEBUG -eq 1 ] && print -B "Attempt detach of $v"
		/usr/bin/hdiutil detach "$v"
	done
}
create()
{
	print -G "Starting Creation process for $SOURCE"
	if [ ! -d "$WORK_DIR" ];then
		mkdir -p$VERBOSE "$WORK_DIR"
	fi
	mkdir -p$VERBOSE "$WORK_DIR/install_build"
	mkdir -p$VERBOSE "$WORK_DIR/install_app"
	cd "$WORK_DIR"
	TARGET_NAME="$OS_NAME""_""$OS_VERSION"
	/usr/bin/hdiutil create -o "$WORK_DIR/$TARGET_NAME.cdr" -size 12g -layout SPUD -fs HFS+J
	attach "$WORK_DIR/$TARGET_NAME.cdr.dmg" "$WORK_DIR/install_build"
	case "$(echo $OS_VERSION | cut -d . -f2)" in
		"13")
			"$CREATEINSTALLMEDIA_LOC" --volume "$WORK_DIR/install_build" --nointeraction
			;;
		"12" | "11" | "10" | "9")
			attach "$INSTALLESD_LOC" "$WORK_DIR/install_app"
			asr restore -source "$WORK_DIR/install_app/BaseSystem.dmg" -target "$WORK_DIR/install_build" -noprompt -noverify -erase
			loop_count=1
			while [ ! -d "/Volumes/OS X Base System/" ]
			do
				sleep_count=3
				(( sleep_count = loop_count * sleep_count ))
				print -Y "Waiting for OS X Base System to mount, sleeping for $sleep_count seconds..."
				sleep $sleep_count
				((loop_count++))
				[ $loop_count -gt 3 ] && print -R "Timeout while waiting for OS X Base System to mount." && exit 1
			done
			rm -f$VERBOSE /Volumes/OS\ X\ Base\ System/System/Installation/Packages
			cp -rp$VERBOSE "$WORK_DIR/install_app/Packages" /Volumes/OS\ X\ Base\ System/System/Installation/
			cp -rp$VERBOSE "$WORK_DIR/install_app/BaseSystem.chunklist" /Volumes/OS\ X\ Base\ System/BaseSystem.chunklist
			cp -rp$VERBOSE "$WORK_DIR/install_app/BaseSystem.dmg" /Volumes/OS\ X\ Base\ System/BaseSystem.dmg
			;;
		*)
			print -R "Unsupported OS_VERSION: $OS_VERSION"
			exit 1
			;;
	esac
	[ $? -ne 0 ] && print -R "Creation failed. See above for errors." && exit 1
	detach_all_volumes
	/usr/bin/hdiutil convert "$WORK_DIR/$TARGET_NAME.cdr.dmg" -format UDTO -o "$WORK_DIR/$TARGET_NAME.iso"
	[ $? -ne 0 ] && print -R "Conversion failed. See above for errors." && exit 1
	mv -f$VERBOSE "$WORK_DIR/$TARGET_NAME.iso.cdr" "$WORK_DIR/$TARGET_NAME.iso"
	rm -f$VERBOSE "$WORK_DIR/$TARGET_NAME.cdr.dmg"
	print -G "Your ISO is ready for deployment at $WORK_DIR/$TARGET_NAME.iso"
	/usr/bin/open "$WORK_DIR"
}
usage()
{
	echo ""
	echo "	Usage for $0:"
	echo "	Optional Flags:"
	echo "		-h: Display this dialog"
	echo "		-c: Create flag to initiate ISO creation."
	echo "		-d: Enable Debugging."
	echo "	Required Flags:"
	echo "		-s absolute_path: Source file absolute path."
	echo ""
}

#### Main Run ####
if [ "$(uname -s)" != "Darwin" ];then
	print -R "Need to run this on a Mac!"
	exit 1
fi
if [ $# -lt 1 ]; then
	print -R "Missing arguments"
	usage
	exit 1
else
	while getopts "hs:cd" opt
	do
		case "$opt" in
			"h")
				usage
				;;
			"s")
				SOURCE="$OPTARG"
				;;
			"c")
				CREATE=1
				;;
			"d")
				DEBUG=1
				VERBOSE="v"
				;;
			"*")
				print -R "Unrecognized Argument: $opt"
				usage
				exit 1
				;;
		esac
	done
fi
if [ $CREATE -eq 1 ];then
	check_source
	process_source
	create
	exit 0
fi
if [ $DEBUG -eq 1 ]; then
	check_source
	process_source
	print -B "DEBUG: $DEBUG"
	print -B "SOURCE: $SOURCE"
	print -B "CREATE: $CREATE"
	print -B "OS_NAME: $OS_NAME"
	print -B "OS_VERSION: $OS_VERSION"
	detach_all_volumes
	rm -rfv "$WORK_DIR"
fi
